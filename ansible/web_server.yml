---
- name: Provision EC2 instance
  hosts: web_servers
  gather_facts: true
  become: true
  vars:
    security_group: your_security_group_name
    key_pair: your_key_pair_name
    aws_access_key_id: your_access_key_id
    aws_secret_key: your_secret_access_key
    aws_region: your_aws_region
    subnet_id: your_subnet_id

  tasks:
    - name: Install AWS CLI
      pip:
        name: awscli
        state: present

    - name: Configure AWS CLI
      command: "aws configure set aws_access_key_id {{ aws_access_key_id }} && aws configure set aws_secret_access_key {{ aws_secret_key }} && aws configure set region {{ aws_region }}"
    
    - name: Get Ubuntu 20.04 LTS AMI ID
      command: "aws ec2 describe-images --owners 099720109477 --filters 'Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*' --query 'Images[0].ImageId' --output text"
      register: ami_id

    - name: Launch EC2 instance
      ec2:
        key_name: "{{ key_pair }}"
        group: "{{ security_group }}"
        instance_type: t2.micro
        image: "{{ ami_id.stdout }}"
        wait: yes
        exact_count: 1
        vpc_subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
      register: ec2_instance

    - name: Add EC2 instance to the host group
      add_host:
        name: "{{ item.public_ip }}"
        groups: launched
      with_items: "{{ ec2_instance.instances }}"

    - name: Wait for SSH to become available on EC2 instances
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        delay: 60
        timeout: 600
      with_items: "{{ ec2_instance.instances }}"

    - name: Configure security group for EC2 instance
      ec2_group_info:
        name: "{{ security_group }}"
        region: "{{ aws_region }}"
      register: sg_info

    - name: Add SSH and HTTP rules to security group
      ec2_group:
        name: "{{ security_group }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      when: sg_info.groups[0].ip_permissions != expected_rules

    - name: Print EC2 public IP
      debug:
        msg: "EC2 Public IP: {{ item.public_ip }}"
      with_items: "{{ ec2_instance.instances }}"
